<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 11.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="11.0">
 <Namespaces>
  <Namespace Name="Smulator">
   <Messages>
    <Message Id="Smulator" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Smulator' in namespace name 'Smulator'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Smulator.BaseComponents">
   <Messages>
    <Message Id="Smulator" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Smulator' in namespace name 'Smulator.BaseComponents'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Smulator.BaseComponents.Distributions">
   <Messages>
    <Message Id="Smulator" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Smulator' in namespace name 'Smulator.BaseComponents.Distributions'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Smulator.Util">
   <Messages>
    <Message Id="Smulator" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Smulator' in namespace name 'Smulator.Util'.</Issue>
    </Message>
    <Message Id="Util" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Util' in namespace name 'Smulator.Util'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="E:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\bin\x64\Debug\Smulator.BaseComponents.dll">
   <Modules>
    <Module Name="smulator.basecomponents.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'Smulator.BaseComponents.dll' with a strong name key.</Issue>
      </Message>
      <Message Id="Smulator" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Smulator' in assembly name 'Smulator.BaseComponents.dll'.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'Smulator.BaseComponents.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
       <Issue Name="NoAttribute" Certainty="95" Level="CriticalError">Because 'Smulator.BaseComponents.dll' exposes externally visible types, mark it with ComVisible(false) at the assembly level and then mark all types within the assembly that should be exposed to COM clients with ComVisible(true).</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Smulator">
       <Types>
        <Type Name="BufferEmptyException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'BufferEmptyException': protected BufferEmptyException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'BufferEmptyException': public BufferEmptyException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'BufferEmptyException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="BufferFullException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'BufferFullException': protected BufferFullException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'BufferFullException': public BufferFullException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'BufferFullException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ConnectionException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ConnectionException': protected ConnectionException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ConnectionException': public ConnectionException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'ConnectionException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="GeneralException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'GeneralException': protected GeneralException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'GeneralException': public GeneralException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'GeneralException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="TimeoutException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'TimeoutException': protected TimeoutException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'TimeoutException': public TimeoutException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'TimeoutException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ValidationException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ValidationException': protected ValidationException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ValidationException': public ValidationException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'ValidationException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="XEventException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'XEventException': protected XEventException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'XEventException': public XEventException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'XEventException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="XObjectException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'XObjectException': protected XObjectException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'XObjectException': public XObjectException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'XObjectException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Smulator.BaseComponents">
       <Types>
        <Type Name="MetaComponent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddXObject(Smulator.BaseComponents.XObject)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents" File="MetaComponent.cs" Line="56">In externally visible method 'MetaComponent.AddXObject(XObject)', validate parameter 'obj' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Item(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents" File="MetaComponent.cs" Line="49">'MetaComponent.this.get(string)' creates an exception of type 'Exception', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents" File="MetaComponent.cs" Line="49">'MetaComponent.this.get(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="XEngine" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EventList" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'XEngine.EventList' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RegisterXObject(Smulator.BaseComponents.XObject)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="XObject" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents" File="XEngine.cs" Line="50">Correct the spelling of the unrecognized token 'XObject' in the literal '"Duplicate XObject key \r\n"'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents" File="XEngine.cs" Line="49">In externally visible method 'XEngine.RegisterXObject(XObject)', validate parameter 'obj' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveXObject(Smulator.BaseComponents.XObject)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents" File="XEngine.cs" Line="56">In externally visible method 'XEngine.RemoveXObject(XObject)', validate parameter 'obj' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StartSimulation()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents" File="XEngine.cs" Line="75">'obj', a variable, is cast to type 'XObject' multiple times in method 'XEngine.StartSimulation()'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Time" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'XEngine.Time' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XEngineFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="CriticalWarning">Because type 'XEngineFactory' contains only 'static' ('Shared' in Visual Basic) members, mark it as 'sealed' ('NotInheritable' in Visual Basic) to prevent consumers from inheriting from it.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#XEngine" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'XEngineFactory.XEngine' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XEvent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FireTime" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'XEvent.FireTime' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NextEvent" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'XEvent.NextEvent' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parameters" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'XEvent.Parameters' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TargetXObject" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'XEvent.TargetXObject' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'XEvent.Type' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XObject" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DelegatesIsSetUp" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents" File="XObject.cs" Line="136">The compound word 'SetUp' in member name 'XObject.DelegatesIsSetUp' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents" File="XObject.cs" Line="52">Correct the casing of 'ID' in member name 'XObject.ID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessXEvent(Smulator.BaseComponents.XEvent)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents" File="XObject.cs" Line="111">In method 'XObject.ProcessXEvent(XEvent)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Snapshot(System.String,System.Xml.XmlTextWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents" File="XObject.cs" Line="128">In externally visible method 'XObject.Snapshot(string, XmlTextWriter)', validate parameter 'writer' before using it.</Issue>
            </Message>
            <Message Id="id" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents" File="XObject.cs" Line="127">'id', a parameter declared in 'XObject.Snapshot(string, XmlTextWriter)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Smulator.BaseComponents.Distributions">
       <Types>
        <Type Name="ErlangDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Erlang" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Erlang' in type name 'ErlangDistribution'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Double,System.Double,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="ErlangDistribution.cs" Line="32">'ErlangDistribution.ErlangDistribution(string, double, double, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ErlangDistribution..ctor(String, Double, Double, Int32)&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
            <Message Id="std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="ErlangDistribution.cs" Line="32">In method 'ErlangDistribution.ErlangDistribution(string, double, double, int)', correct the spelling of 'std' in parameter name 'stdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StdDev" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="ErlangDistribution.cs" Line="53">Correct the spelling of 'Std' in member name 'ErlangDistribution.StdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExpDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Exp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Exp' in type name 'ExpDistribution'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Double,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="ExpDistribution.cs" Line="31">'ExpDistribution.ExpDistribution(string, double, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ExpDistribution..ctor(String, Double, Int32)&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GeometricBase0Distribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Double,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="GeometricBase0Distribution.cs" Line="31">'GeometricBase0Distribution.GeometricBase0Distribution(string, double, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;GeometricBase0Distribution..ctor(String, Double, Int32)&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GeometricBase1Distribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Double,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="GeometricBase1Distribution.cs" Line="31">'GeometricBase1Distribution.GeometricBase1Distribution(string, double, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;GeometricBase1Distribution..ctor(String, Double, Int32)&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HyperExponentialDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Double,System.Double,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="HyperExponentialDistribution.cs" Line="32">'HyperExponentialDistribution.HyperExponentialDistribution(string, double, double, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;HyperExponentialDistribution..ctor(String, Double, Double, Int32)&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
            <Message Id="std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="HyperExponentialDistribution.cs" Line="32">In method 'HyperExponentialDistribution.HyperExponentialDistribution(string, double, double, int)', correct the spelling of 'std' in parameter name 'stdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StdDev" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="HyperExponentialDistribution.cs" Line="52">Correct the spelling of 'Std' in member name 'HyperExponentialDistribution.StdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HyperGeometricDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Double,System.Double,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="HyperGeometricDistribution.cs" Line="32">'HyperGeometricDistribution.HyperGeometricDistribution(string, double, double, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;HyperGeometricDistribution..ctor(String, Double, Double, Int32)&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
            <Message Id="std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="HyperGeometricDistribution.cs" Line="32">In method 'HyperGeometricDistribution.HyperGeometricDistribution(string, double, double, int)', correct the spelling of 'std' in parameter name 'stdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StdDev" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="HyperGeometricDistribution.cs" Line="53">Correct the spelling of 'Std' in member name 'HyperGeometricDistribution.StdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InverseDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Double,System.Double,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="InverseDistribution.cs" Line="34">'InverseDistribution.InverseDistribution(string, double, double, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;InverseDistribution..ctor(String, Double, Double, Int32)&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Mean" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Mean()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="InverseDistribution.cs" Line="63">'InverseDistribution.Mean.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="LogNormalDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="LogNormal" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'LogNormal' in type name 'LogNormalDistribution' exists as a discrete term. If your usage is intended to be single word, case it as 'Lognormal'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Double,System.Double,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="LogNormalDistribution.cs" Line="32">'LogNormalDistribution.LogNormalDistribution(string, double, double, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;LogNormalDistribution..ctor(String, Double, Double, Int32)&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
            <Message Id="std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="LogNormalDistribution.cs" Line="32">In method 'LogNormalDistribution.LogNormalDistribution(string, double, double, int)', correct the spelling of 'std' in parameter name 'stdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StdDev" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="LogNormalDistribution.cs" Line="53">Correct the spelling of 'Std' in member name 'LogNormalDistribution.StdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MMPPDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="MMPP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'MMPP' in type name 'MMPPDistribution' by changing it to 'Mmpp'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Double[],System.Double[],System.Double[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="MMPPDistribution.cs" Line="29">'MMPPDistribution.MMPPDistribution(string, double[], double[], double[], int, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;MMPPDistribution..ctor(String, Double[], Double[], Double[], Int32, Int32)&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Mean" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Mean()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="MMPPDistribution.cs" Line="139">'MMPPDistribution.Mean.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="NormalDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Double,System.Double,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="NormalDistribution.cs" Line="32">'NormalDistribution.NormalDistribution(string, double, double, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;NormalDistribution..ctor(String, Double, Double, Int32)&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
            <Message Id="std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="NormalDistribution.cs" Line="32">In method 'NormalDistribution.NormalDistribution(string, double, double, int)', correct the spelling of 'std' in parameter name 'stdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StdDev" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="NormalDistribution.cs" Line="52">Correct the spelling of 'Std' in member name 'NormalDistribution.StdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ParetoDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Double,System.Double,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="ParetoDistribution.cs" Line="32">'ParetoDistribution.ParetoDistribution(string, double, double, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ParetoDistribution..ctor(String, Double, Double, Int32)&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Mean" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Mean()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="ParetoDistribution.cs" Line="61">'ParetoDistribution.Mean.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="RealDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'RealDistribution' to protected.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Name="Member" Certainty="95" Level="Error">Change member names 'seed' and 'Seed' so that they differ by more than case.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetValue()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="RealDistribution.cs" Line="64">Change 'RealDistribution.GetValue()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValueInternal()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'RealDistribution.GetValueInternal()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#init()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="init" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="RealDistribution.cs" Line="56">Correct the casing of 'init' in member name 'RealDistribution.init()' by changing it to 'Init'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#randomGenerator" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RealDistribution.randomGenerator' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#seed" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RealDistribution.seed' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StandardDistributions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'StandardDistributions' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#NewDistribution(Smulator.BaseComponents.Distributions.StandardDistributions+DistributionEnum,System.String,System.Int32,System.Double,System.Double,System.Double)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="StandardDistributions.cs" Line="59">In method 'StandardDistributions.NewDistribution(StandardDistributions.DistributionEnum, string, int, double, double, double)', correct the spelling of 'Param' in parameter name 'extraParam0' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NewDistribution(System.String,System.Int32,Smulator.BaseComponents.Distributions.StdDistributionParameterSet)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'StandardDistributions.NewDistribution(string, int, StdDistributionParameterSet)', validate parameter 'parameters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StandardDistributions+DistributionEnum" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Name="NotFlagsNoZeroValue" Certainty="95" Level="CriticalError">Add a member to 'StandardDistributions.DistributionEnum' that has a value of zero with a suggested name of 'None'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'StandardDistributions.DistributionEnum' so that it does not end in 'Enum'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'StandardDistributions.DistributionEnum'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Erlang" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Erlang" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Erlang' in member name 'StandardDistributions.DistributionEnum.Erlang' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Exp" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Exp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Exp' in member name 'StandardDistributions.DistributionEnum.Exp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogNormal" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LogNormal" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'LogNormal' in member name 'StandardDistributions.DistributionEnum.LogNormal' exists as a discrete term. If your usage is intended to be single word, case it as 'Lognormal' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StdDistributionParameterSet" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in type name 'StdDistributionParameterSet'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Double,System.Double,Smulator.BaseComponents.Distributions.StandardDistributions+DistributionEnum,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="DistributionParameterSet.cs" Line="26">In method 'StdDistributionParameterSet.StdDistributionParameterSet(double, double, StandardDistributions.DistributionEnum, double)', correct the spelling of 'Param' in parameter name 'extraParam0' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="DistributionParameterSet.cs" Line="26">In method 'StdDistributionParameterSet.StdDistributionParameterSet(double, double, StandardDistributions.DistributionEnum, double)', correct the spelling of 'std' in parameter name 'stdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#distributionType" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StdDistributionParameterSet.distributionType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#extraParam0" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StdDistributionParameterSet.extraParam0' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Param' in member name 'StdDistributionParameterSet.extraParam0' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#mean" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StdDistributionParameterSet.mean' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#stdDev" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StdDistributionParameterSet.stdDev' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'std' in member name 'StdDistributionParameterSet.stdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TriangularDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Double,System.Double,System.Double,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="TriangularDistribution.cs" Line="35">'TriangularDistribution.TriangularDistribution(string, double, double, double, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;TriangularDistribution..ctor(String, Double, Double, Double, Int32)&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UniformDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Double,System.Int32,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="UniformDistribution.cs" Line="36">'UniformDistribution.UniformDistribution(string, double, int, double)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;UniformDistribution..ctor(String, Double, Int32, Double)&#xD;&#xA;RealDistribution.set_Mean(Double):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Distribiution" File="UniformDistribution.cs" Line="36">'UniformDistribution.UniformDistribution(string, double, int, double)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;UniformDistribution..ctor(String, Double, Int32, Double)&#xD;&#xA;RealDistribution.set_Mean(Double):Void&#xD;&#xA;RealDistribution.set_Seed(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Smulator.Util">
       <Types>
        <Type Name="BaseParameterSet" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FieldDump(Smulator.Util.IFieldDump,System.IO.TextWriter)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Smulator.Util.BaseParameterSet.writeLineIndented(System.IO.TextWriter,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="50">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: ":".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="91">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: ":".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="127">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: ":".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="82">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "=".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="123">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "=".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="60">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "[]:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="101">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "[]:".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="51">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "{".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="61">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "{".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="67">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "{".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="92">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "{".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="102">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "{".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="108">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "{".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="55">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "}".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="74">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "}".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="79">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "}".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="96">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "}".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="115">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "}".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="120">Method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' passes a literal string as parameter 'text' of a call to 'BaseParameterSet.writeLineIndented(TextWriter, string)'. Retrieve the following string(s) from a resource table instead: "}".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="125">Modify 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="BaseParameterSet.cs" Line="46">In externally visible method 'BaseParameterSet.FieldDump(IFieldDump, TextWriter)', validate parameter 'obj' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CMRRandomGeneratorSource" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="CMR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'CMR' in type name 'CMRRandomGeneratorSource' by changing it to 'Cmr'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Int64,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="CMRRandomGeneratorSource.cs" Line="37">In method 'CMRRandomGeneratorSource.CMRRandomGeneratorSource(long, int)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="CMRRandomGeneratorSource.cs" Line="37">In method 'CMRRandomGeneratorSource.CMRRandomGeneratorSource(long, int)', consider providing a more meaningful name than parameter name 'n'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#a12" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'CMRRandomGeneratorSource.a12' is declared as 'static readonly' but is initialized with a constant value '1403580'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#a13" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'CMRRandomGeneratorSource.a13' is declared as 'static readonly' but is initialized with a constant value '-810728'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#a21" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'CMRRandomGeneratorSource.a21' is declared as 'static readonly' but is initialized with a constant value '527612'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#a23" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'CMRRandomGeneratorSource.a23' is declared as 'static readonly' but is initialized with a constant value '-1370589'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#itof(System.Int64,System.Int64)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="m" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="CMRRandomGeneratorSource.cs" Line="132">Parameter 'm' of 'CMRRandomGeneratorSource.itof(long, long)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m1" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'CMRRandomGeneratorSource.m1' is declared as 'static readonly' but is initialized with a constant value '4294967087'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#m2" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'CMRRandomGeneratorSource.m2' is declared as 'static readonly' but is initialized with a constant value '4294944443'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#norm" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'CMRRandomGeneratorSource.norm' is declared as 'static readonly' but is initialized with a constant value '2.32830654929573E-10'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IndexOutOfBoundsException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'IndexOutOfBoundsException': protected IndexOutOfBoundsException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'IndexOutOfBoundsException': public IndexOutOfBoundsException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'IndexOutOfBoundsException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IParameterSetBasedExecutable" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Build(Smulator.Util.ExecutionParameterSet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IParameterSetBasedExecutable.Build(ExecutionParameterSet)', correct the spelling of 'param' in parameter name 'param' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Simulate(Smulator.Util.ExecutionParameterSet,Smulator.Util.ExecutionParameterSet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IParameterSetBasedExecutable.Simulate(ExecutionParameterSet, ExecutionParameterSet)', correct the spelling of 'Param' in parameter name 'nextParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IParameterSetBasedExecutable.Simulate(ExecutionParameterSet, ExecutionParameterSet)', correct the spelling of 'param' in parameter name 'param' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Simulate1(Smulator.Util.ExecutionParameterSet,Smulator.Util.ExecutionParameterSet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IParameterSetBasedExecutable.Simulate1(ExecutionParameterSet, ExecutionParameterSet)', correct the spelling of 'Param' in parameter name 'nextParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IParameterSetBasedExecutable.Simulate1(ExecutionParameterSet, ExecutionParameterSet)', correct the spelling of 'param' in parameter name 'param' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MomentsStatistics" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="42">In method 'MomentsStatistics.MomentsStatistics(int, bool)', correct the spelling of 'n' in parameter name 'nMoments' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Int32,System.Boolean,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="29">'MomentsStatistics.MomentsStatistics(int, bool, bool)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;MomentsStatistics..ctor(Int32, Boolean, Boolean)&#xD;&#xA;RealStatistics.Clear():Void</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="29">In method 'MomentsStatistics.MomentsStatistics(int, bool, bool)', correct the spelling of 'n' in parameter name 'nMoments' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#defConfProb" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MomentsStatistics.defConfProb' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Conf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Conf' in member name 'MomentsStatistics.defConfProb' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Prob" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Prob' in member name 'MomentsStatistics.defConfProb' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="def" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'def' in member name 'MomentsStatistics.defConfProb' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetConfidenceInterval(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Prob" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="106">In method 'MomentsStatistics.GetConfidenceInterval(double)', correct the spelling of 'Prob' in parameter name 'confProb' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="conf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="106">In method 'MomentsStatistics.GetConfidenceInterval(double)', correct the spelling of 'conf' in parameter name 'confProb' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMoment(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="momentNumber-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="89">Correct the potential overflow in the operation 'momentNumber-1' in 'MomentsStatistics.GetMoment(int)'.</Issue>
             <Issue Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="91">Correct the potential overflow in the operation 'momentNumber-1' in 'MomentsStatistics.GetMoment(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NormalZ(System.Double)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="164">The 'this' parameter (or 'Me' in Visual Basic) of 'MomentsStatistics.NormalZ(double)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Snapshot(System.String,System.Xml.XmlTextWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="184">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'MomentsStatistics.Snapshot(string, XmlTextWriter)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="185">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'MomentsStatistics.Snapshot(string, XmlTextWriter)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="186">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'MomentsStatistics.Snapshot(string, XmlTextWriter)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="187">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'MomentsStatistics.Snapshot(string, XmlTextWriter)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="188">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'MomentsStatistics.Snapshot(string, XmlTextWriter)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="194">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'MomentsStatistics.Snapshot(string, XmlTextWriter)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="183">In externally visible method 'MomentsStatistics.Snapshot(string, XmlTextWriter)', validate parameter 'writer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#tDistribution(System.Int64,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="t" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="128">Correct the casing of 't' in member name 'MomentsStatistics.tDistribution(long, double)' by changing it to 'T'.</Issue>
            </Message>
            <Message Id="ndf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="128">In method 'MomentsStatistics.tDistribution(long, double)', correct the spelling of 'ndf' in parameter name 'ndf' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="p" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="MomentsStatistics.cs" Line="128">In method 'MomentsStatistics.tDistribution(long, double)', consider providing a more meaningful name than parameter name 'p'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NoSuchElementException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NoSuchElementException': protected NoSuchElementException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'NoSuchElementException': public NoSuchElementException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'NoSuchElementException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NotListedExecutionParameterset" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Parameterset" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Parameterset' in type name 'NotListedExecutionParameterset'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'NotListedExecutionParameterset' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#outputPath" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'NotListedExecutionParameterset.outputPath' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#responseTimeAnalysisFile" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'NotListedExecutionParameterset.responseTimeAnalysisFile' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#responseTimeLoggingFile" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'NotListedExecutionParameterset.responseTimeLoggingFile' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ParameteSetBasedExecution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Paramete" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Paramete' in type name 'ParameteSetBasedExecution'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'ParameteSetBasedExecution' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Execute(System.String[],Smulator.Util.ExecutionParameterSet[],System.String,Smulator.Util.IParameterSetBasedExecutable)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="ParameteSetBasedExecution.cs" Line="69">In method 'ParameteSetBasedExecution.Execute(string[], ExecutionParameterSet[], string, IParameterSetBasedExecutable)', object 'writer' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'writer' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="ParameteSetBasedExecution.cs" Line="74">Method 'ParameteSetBasedExecution.Execute(string[], ExecutionParameterSet[], string, IParameterSetBasedExecutable)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "Switching to low priority execution ...".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="ParameteSetBasedExecution.cs" Line="38">Method 'ParameteSetBasedExecution.Execute(string[], ExecutionParameterSet[], string, IParameterSetBasedExecutable)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object)'. Retrieve the following string(s) from a resource table instead: "Using parameters path : {0}".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="ParameteSetBasedExecution.cs" Line="34">Method 'ParameteSetBasedExecution.Execute(string[], ExecutionParameterSet[], string, IParameterSetBasedExecutable)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object, object)'. Retrieve the following string(s) from a resource table instead: "Usage: {0}.exe &lt;run.xml path&gt; [parameter-set-index]\r\nUsing defaut path : {1}".</Issue>
            </Message>
            <Message Id="System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="ParameteSetBasedExecution.cs" Line="51">Method 'ParameteSetBasedExecution.Execute(string[], ExecutionParameterSet[], string, IParameterSetBasedExecutable)' passes a literal string as parameter 'format' of a call to 'Console.WriteLine(string, object, object, object)'. Retrieve the following string(s) from a resource table instead: "Can not read from {0} : {1} \r\nUsing default parameters and making {2} file as ...".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="ParameteSetBasedExecution.cs" Line="49">Modify 'ParameteSetBasedExecution.Execute(string[], ExecutionParameterSet[], string, IParameterSetBasedExecutable)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="ParameteSetBasedExecution.cs" Line="29">In method 'ParameteSetBasedExecution.Execute(string[], ExecutionParameterSet[], string, IParameterSetBasedExecutable)', correct the spelling of 'param' in parameter name 'param' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="defaut" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="ParameteSetBasedExecution.cs" Line="34">Correct the spelling of the unrecognized token 'defaut' in the literal '"Usage: {0}.exe &lt;run.xml path&gt; [parameter-set-index]\r\nUsing defaut path : {1}"'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="ParameteSetBasedExecution.cs" Line="33">In externally visible method 'ParameteSetBasedExecution.Execute(string[], ExecutionParameterSet[], string, IParameterSetBasedExecutable)', validate parameter 'args' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="ParameteSetBasedExecution.cs" Line="41">In externally visible method 'ParameteSetBasedExecution.Execute(string[], ExecutionParameterSet[], string, IParameterSetBasedExecutable)', validate parameter 'param' before using it.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Name="Reassigned" Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="ParameteSetBasedExecution.cs" Line="86">In externally visible method 'ParameteSetBasedExecution.Execute(string[], ExecutionParameterSet[], string, IParameterSetBasedExecutable)', validate local variable ''...'', which was reassigned from parameter 'network', before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RandomGenerationException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'RandomGenerationException': protected RandomGenerationException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'RandomGenerationException': public RandomGenerationException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'RandomGenerationException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="RandomGenerator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Binomial(System.Int64,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="214">In method 'RandomGenerator.Binomial(long, double)', consider providing a more meaningful name than parameter name 'n'.</Issue>
            </Message>
            <Message Id="u" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="214">In method 'RandomGenerator.Binomial(long, double)', consider providing a more meaningful name than parameter name 'u'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Erlang(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Erlang" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="104">Correct the spelling of 'Erlang' in member name 'RandomGenerator.Erlang(double, double)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="104">In method 'RandomGenerator.Erlang(double, double)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="104">In method 'RandomGenerator.Erlang(double, double)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FloatRandom()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="float" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="58">Consider replacing the language-specific data type identifier 'Float' in member name 'RandomGenerator.FloatRandom()' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Geometric0(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="180">In method 'RandomGenerator.Geometric0(double)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Geometric1(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="189">In method 'RandomGenerator.Geometric1(double)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetInteger(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="integer" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="51">Consider replacing the language-specific data type identifier 'Integer' in member name 'RandomGenerator.GetInteger(int)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="maxValue+1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="52">Correct the potential overflow in the operation 'maxValue+1' in 'RandomGenerator.GetInteger(int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetInteger(System.UInt32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="integer" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="44">Consider replacing the language-specific data type identifier 'Integer' in member name 'RandomGenerator.GetInteger(uint)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="maxValue+1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="45">Correct the potential overflow in the operation 'maxValue+1' in 'RandomGenerator.GetInteger(uint)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HyperExponential(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="121">In method 'RandomGenerator.HyperExponential(double, double)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="121">In method 'RandomGenerator.HyperExponential(double, double)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="HyperExponential" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="123">Correct the spelling of the unrecognized token 'HyperExponential' in the literal '"HyperExponential : Mean must be greater than standard deviation."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HyperGeometric(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="199">In method 'RandomGenerator.HyperGeometric(double, double)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="199">In method 'RandomGenerator.HyperGeometric(double, double)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogNormal(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LogNormal" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="169">The compound word 'LogNormal' in member name 'RandomGenerator.LogNormal(double, double)' exists as a discrete term. If your usage is intended to be single word, case it as 'Lognormal' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="169">In method 'RandomGenerator.LogNormal(double, double)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="169">In method 'RandomGenerator.LogNormal(double, double)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Normal(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="140">In method 'RandomGenerator.Normal(double, double)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="140">In method 'RandomGenerator.Normal(double, double)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Poisson(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="228">In method 'RandomGenerator.Poisson(double)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Uniform(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="64">In method 'RandomGenerator.Uniform(double, double)', consider providing a more meaningful name than parameter name 'a'.</Issue>
            </Message>
            <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="64">In method 'RandomGenerator.Uniform(double, double)', consider providing a more meaningful name than parameter name 'b'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UniformInt(System.Int64,System.Int64)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="74">In method 'RandomGenerator.UniformInt(long, long)', consider providing a more meaningful name than parameter name 'm'.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="74">In method 'RandomGenerator.UniformInt(long, long)', consider providing a more meaningful name than parameter name 'n'.</Issue>
            </Message>
            <Message Id="int" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="74">Consider replacing the language-specific data type identifier 'Int' in member name 'RandomGenerator.UniformInt(long, long)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UniformUInt(System.UInt32,System.UInt32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="79">In method 'RandomGenerator.UniformUInt(uint, uint)', consider providing a more meaningful name than parameter name 'm'.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="79">In method 'RandomGenerator.UniformUInt(uint, uint)', consider providing a more meaningful name than parameter name 'n'.</Issue>
            </Message>
            <Message Id="uint" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="79">Consider replacing the language-specific data type identifier 'UInt' in member name 'RandomGenerator.UniformUInt(uint, uint)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UniformULong(System.UInt64,System.UInt64)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="m" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="84">In method 'RandomGenerator.UniformULong(ulong, ulong)', consider providing a more meaningful name than parameter name 'm'.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="84">In method 'RandomGenerator.UniformULong(ulong, ulong)', consider providing a more meaningful name than parameter name 'n'.</Issue>
            </Message>
            <Message Id="ulong" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="84">Consider replacing the language-specific data type identifier 'ULong' in member name 'RandomGenerator.UniformULong(ulong, ulong)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Weibull(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Weibull" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RandomGenerator.cs" Line="246">Correct the spelling of 'Weibull' in member name 'RandomGenerator.Weibull(double, double)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RandomGenerator+RandomGeneratorType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'RandomGenerator.RandomGeneratorType'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CMR" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CMR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'CMR' in member name 'RandomGenerator.RandomGeneratorType.CMR' by changing it to 'Cmr'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RealObservation" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RealStatistics.cs" Line="79">In method 'RealObservation.RealObservation(double, double)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#time" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'RealObservation.time' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#val" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'RealObservation.val' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RealStatistics" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'RealStatistics' to protected.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Name="Member" Certainty="95" Level="Error">Change member names 'StartTime' and 'startTime' so that they differ by more than case.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetMean()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'RealStatistics.GetMean()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetVariance()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'RealStatistics.GetVariance()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#History" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RealStatistics.History' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Observe(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'RealStatistics.Observe(double)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#startTime" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RealStatistics.startTime' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RedBlackNodeLong" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Color" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RedBlackNodeLong.Color' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FirstXEvent" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RedBlackNodeLong.FirstXEvent' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Key" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RedBlackNodeLong.Key' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LastXEvent" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RedBlackNodeLong.LastXEvent' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Left" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RedBlackNodeLong.Left' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parent" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RedBlackNodeLong.Parent' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Right" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RedBlackNodeLong.Right' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RedBlackTree" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Count" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RedBlackTree.Count' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMinKey()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RedBlackTree.cs" Line="324">Change 'RedBlackTree.GetMinKey()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMinNode()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RedBlackTree.cs" Line="343">Change 'RedBlackTree.GetMinNode()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMinValue()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RedBlackTree.cs" Line="333">Change 'RedBlackTree.GetMinValue()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertXEvent(Smulator.BaseComponents.XEvent)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'RedBlackTree.InsertXEvent(XEvent)', validate parameter 'data' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#intHashCode" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'RedBlackTree.intHashCode' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RotateLeft(Smulator.Util.RedBlackNodeLong)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RedBlackTree.cs" Line="200">In method 'RedBlackTree.RotateLeft(RedBlackNodeLong)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RedBlackTree.cs" Line="205">In externally visible method 'RedBlackTree.RotateLeft(RedBlackNodeLong)', validate parameter 'x' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RotateRight(Smulator.Util.RedBlackNodeLong)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RedBlackTree.cs" Line="237">In method 'RedBlackTree.RotateRight(RedBlackNodeLong)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="RedBlackTree.cs" Line="242">In externally visible method 'RedBlackTree.RotateRight(RedBlackNodeLong)', validate parameter 'x' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#sentinelNode" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'RedBlackTree.sentinelNode' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#strIdentifier" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'RedBlackTree.strIdentifier' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SeedGeneratorFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Name="Member" Certainty="95" Level="Error">Change member names 'seedGenrator' and 'SeedGenrator' so that they differ by more than case.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'SeedGeneratorFactory' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetSeed()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="SeedGeneratorFactory.cs" Line="41">Change 'SeedGeneratorFactory.GetSeed()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#seedGenrator" Kind="Field" Static="True" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Genrator" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Genrator' in member name 'SeedGeneratorFactory.seedGenrator' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'SeedGeneratorFactory.seedGenrator' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SeedGenrator" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Genrator" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-01-03 07:03:55Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="e:\Arash\Papers\In Progress\CAL-GCMethod\Simulator\src\Xmulator.BaseComponents\Util" File="SeedGeneratorFactory.cs" Line="48">Correct the spelling of 'Genrator' in member name 'SeedGeneratorFactory.SeedGenrator' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012">
   <Name>Abstract types should not have constructors</Name>
   <Description>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</Description>
   <Resolution Name="Default">Change the accessibility of all public constructors in {0} to protected.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182126(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="TypeShouldBeDiscreteTerm">The compound word '{0}' in type name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
   <Name>Do not raise exceptions in unexpected locations</Name>
   <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
   <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386039(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008">
   <Name>Enums should have zero value</Name>
   <Description>An enum should generally have a zero value. If the enum is not decorated with the Flags attribute, it should have a member with a value of zero that represents the empty state. Optionally, this value is named 'None'. For a Flags-attributed enum, a zero-valued member is optional and, if it exists, should always be named 'None'. This value should indicate that no values have been set in the enum. Using a zero-valued member for other purposes is contrary to the use of the Flags attribute in that the bitwise AND and OR operators are useless with the member.</Description>
   <Resolution Name="NotFlagsNoZeroValue">Add a member to {0} that has a value of zero with a suggested name of 'None'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182149(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberAbbreviation">Correct the casing of '{0}' in member name {1} by changing it to '{2}'. '{2}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Assembly">Correct the spelling of '{0}' in assembly name {1}.</Resolution>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldDifferByMoreThanCase" Category="Microsoft.Naming" CheckId="CA1708">
   <Name>Identifiers should differ by more than case</Name>
   <Description>Do not use names that require case sensitivity for uniqueness. Components must be fully usable from both case-sensitive and case-insensitive languages. Since case-insensitive languages cannot distinguish between two names within the same context that differ only by case, components must avoid this situation.</Description>
   <Resolution Name="Member">Change member names {0} and '{1}' so that they differ by more than case.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182242(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageSpecificMember">Consider replacing the language-specific data type identifier '{0}' in member name {1} with either a language-independent equivalent or a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
   <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182247(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="namingrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182151(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017">
   <Name>Mark assemblies with ComVisibleAttribute</Name>
   <Description>The System.Runtime.InteropServices.ComVisible attribute indicates whether COM clients can use the library. Good design dictates that developers explicitly indicate COM visibility. The default value for this attribute is 'true'. However, the best design is to mark the assembly ComVisible false, and then mark types, interfaces, and individual members as ComVisible true, as appropriate.</Description>
   <Resolution Name="NoAttribute">Because {0} exposes externally visible types, mark it with ComVisible(false) at the assembly level and then mark all types within the assembly that should be exposed to COM clients with ComVisible(true).</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182157(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError, Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182162(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182353(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
   <Name>Operations should not overflow</Name>
   <Description>Arithmetic operations should not be done without first validating the operands to prevent overflow.</Description>
   <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182354(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldBeSealed" Category="Microsoft.Design" CheckId="CA1052">
   <Name>Static holder types should be sealed</Name>
   <Description>Static holder types do not provide functionality that derived instances can extend. Inheriting from such a type indicates a flawed design.</Description>
   <Resolution Name="Default">Because type {0} contains only 'static' ('Shared' in Visual Basic) members, mark it as 'sealed' ('NotInheritable' in Visual Basic) to prevent consumers from inheriting from it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182168(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="Default">Because type {0} contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802">
   <Name>Use literals where appropriate</Name>
   <Description>Prefer literals over InitOnly fields if values do not have to be calculated at runtime.</Description>
   <Resolution Name="Default">Field {0} is declared as 'static readonly' but is initialized with a constant value '{1}'. Mark this field as 'const' instead.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182280(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Resolution Name="Reassigned">In externally visible method {0}, validate local variable '{1}', which was reassigned from parameter '{2}', before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500">
   <Name>Variable names should not match field names</Name>
   <Description>Instance field and variable names should not be identical within the same scope.</Description>
   <Resolution Name="Parameter">{0}, a parameter declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182216(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="11.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
